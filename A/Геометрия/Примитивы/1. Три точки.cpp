/*
* ------------ ТРИ ТОЧКИ ------------
^ O(1)
$ ориентация_трех_точек $ ориентированная_площадь_треугольника
? Пусть даны три точки a, b, c. Найдём значение знаковой площади S треугольника ABC, т.е. площади этого треугольника, взятой со знаком плюс или минус в зависимости от типа поворота, образуемого точками a, b, c: против часовой стрелки или по ней соответственно.

? Знаковая площадь треугольника S позволяет определить обычную площадь треугольника, а так же взаимное расположение точек: точки расположены против часовой стрелки (S < 0), по часовой стрелке (S > 0), точки расположены на одной прямой (S = 0). 

? Рещение основано на использовании понятия наклона прямой. Итак, какое числовое значение характеризует угол наклона прямой (отрезка)? Значение углового коэффициента, который равен тангенсу угла наклона прямой, который она образует с осью абсцисс и вычисляется как отношение вертикального расстояния между двумя точками a и b к горизонтальному расстоянию между этими двумя точками, т.е. k=(y.b-y.a)/(x.b-x.a ). Будем называть это значение наклоном прямой. На рисунке (рис. 1) показаны два отрезка, построенных на трех точках a, b и c. Зная координаты точек, можно вычислить значения наклонов обеих отрезков и, сравнив их, определить способ взаимного расположения трех точек. По рисунку видно, что если наклон отрезка bc больше, чем наклон отрезка ab, то точки расположены против часовой стрелки, если их значения совпадают, то точки колинеарны, в противном случае точки расположены в порядке обхода по часовой стрелке. На этом свойстве основано решение данной задачи. 

? Формула, используемая в функциях, выражается из разности наклонов двух отрезков.
! Полученное значение равно удвоенной площадт треугольника, чтобы получить площадь треугольника, нужно значение поделить на два.
*/

struct Point {
    int x, y;  // если тип данных будет иной, это будет отдельно указано
};

// знаковая площадь
double TriangleSignArea(Point a, Point b, Point c) {
    return ((b.y - a.y) * (c.x - b.x) – 
           (b.x - a.x) * (c.y - b.y)) / 2;  
}

// ориентация трех точек
const int COLLINEAR         = 0; // коллинеарны
const int CLOCK_WISE        = 1; // по часовой стрелке
const int COUNTERCLOCK_WISE = 2; // против часовой стрелке

int orientation(Point a, Point b, Point c) {
    int value = (b.y - a.y) * (c.x - b.x) – 
                (b.x - a.x) * (c.y - b.y);  

    if (value == 0) return COLLINEAR; // точки колинеарны

    return value > 0 ? CLOCK_WISE : COUNTERCLOCK_WISE; // по часовой или против часовой
}
