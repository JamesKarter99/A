/*
* ------------ ПОИСК В ШИРИНУ ------------
^ O(n + m)
$ bfs $ bfs_кратчайшее_расстояние
# список_смежности
? Вершины посещаются в порядке возрастания расстояния от начальной вершины. 

? Используя поиск в ширину для невзвешенного графа, можно вычислить расстояния от начальной вершины s до всех остальных.

? Граф представлен списком смежности d, используется массив посещений used. Кроме того, в dist[i] хранится расстояние от начальной вершины до вершины i. Изначально dist нужно проинициализировать INF, а dist[s] = 0, где s - стартовая вершина. Если требуется найти расстояние только между двумя вершинами, то из цикла можно выйти как только будет установлено значение dist нужной вершины. Порядок обхода устанавливает очередь q.
*/

used[s] = true;
q.push(s);

while (!q.empty()) {
    int curr = q.front(); q.pop();

    for (auto next : d[curr]) {
        if (used[next]) continue;

        used[next] = true;
        q.push(next);
    }
}

//& bfc с поиском кратчайшего расстояния
dist[s] = 0;
used[s] = true;
q.push(s);

while (!q.empty()) {
    int curr = q.front(); q.pop();

    for (auto next : d[curr]) {
        if (used[next]) continue;

        used[next] = true;
        dist[next] = dist[curr] + 1;
        q.push(next);
    }
}