/*
* ------------ СЛАБАЯ K-СВЯЗНОСТЬ ------------
& алгоритм флойда
~ флойд
? Итак, есть n городов. Будем поддерживать матрицу смежности d, изначально проинициализировав ее INF. У нас будет два вида ребер: бесплатное ребро (то, которое указано во входных данных) и платное (то, которое не указано и по которому, чтобы проехать, нужно нарушить правила и заплатить штраф (см. условия задачи)). Будем считывать ребра {i, j}. Поянтно, что само ребро {i, j} бесплатно, а вот противоположное ему либо платное, либо бесплатное (если оно будет указано во входных данных). 

? Так вот, если выполнитть Флойда для такого графа, то самое длинный путь в матрице смежности, это и есть кол-во раз, сколько нужно нарушить правила, чтобы проехать между парой самых удаленных городов.
*/

#include <iostream>
#include <vector>
#include <map>

using namespace std;

using line   = vector <int>;
using matrix = vector <line>;

const int INF = 0x3f3f3f3f;

int main() {
    // ...
    int n, m;
    cin >> n >> m;

    matrix d(n, line(n, INF));
    for (int t(0); t < m; t++) {
        int i, j;
        cin >> i >> j;

        --i, --j;

        d[i][j] = 0;               // это бесплатное ребро
        d[j][i] = min(d[j][i], 1); // возможно платное ребро
    }
    
    // Флойд
    for (int k(0); k < n; k++) {
        for (int i(0); i < n; i++) {
            for (int j(0); j < n; j++) {             
                d[i][j] = min(d[i][j], d[i][k] + d[k][j]);
            }
        }
    }

    int k(0);
    for (int i(0); i < n; i++) {
        for (int j(0); j < n; j++) {
            k = max(k, d[i][j]);
        }
    }

    cout << k;

    return 0;
}